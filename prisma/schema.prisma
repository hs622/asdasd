// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model User {
  id                   String              @id @default(auto()) @map("_id") @db.ObjectId
  firstName            String              @db.String
  lastName             String?             @db.String
  nickName             String?
  email                String?             @unique
  emailVerified        Boolean             @default(false)
  image                String?
  accounts             Account[]
  sessions             Session[]
  isAdult              Boolean?
  address              Address?
  generalInformation   GeneralInformation? @relation("UserToGeneralInformation")
  generalInformationId String?             @db.ObjectId
  healthInformation    HealthInformation?  @relation("UserToHealthInformation")
  healthInformationId  String?             @db.ObjectId

  // healthInfo    HealthInformation

  password  String?  @db.String
  role      String   @db.String
  status    Boolean?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

type Address {
  street  String?
  city    String?
  state   String?
  zip     String?
  country String?
}

model GeneralInformation {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  user              User    @relation(fields: [userId], references: [id], name: "UserToGeneralInformation")
  userId            String  @unique @db.ObjectId
  age               Int?
  gender            String?
  measurementSystem String?
  ethnicity         String?
  weight            Int?
  height            Int?
  heightInches      Int?

  @@map("general_information")
}

model HealthInformation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  User   User   @relation(fields: [userId], references: [id], name: "UserToHealthInformation")
  userId String @unique @db.ObjectId

  @@map("health_information")
}
